module Anoma.Delta.Types;

import Stdlib.Prelude open;
import Anoma.Math open;
import Anoma.Utils open;
import Anoma.Builtin.System open;

--- A fixed-size data type encoding the additively homomorphic and kind distinct ;Delta;.
--- NOTE: For the private testnet, the requirement can be relaxed by allowing ;Delta; to be dynamically-sized.
type Delta :=
  mkDelta@{
    unDelta : AnomaOpaque;
  };

type Proof :=
  mkProof@{
    unProof : AnomaOpaque;
  };

type VerifyingKey :=
  mkVerifyingKey@{
    unVerifyingKey : UNUSED;
  };

type ProvingKey :=
  mkProvingKey@{
    unProvingKey : UNUSED;
  };

type Instance :=
  mkInstance@{
    unInstance : UNUSED;
  };

type Witness :=
  mkWitness@{
    unWitness : UNUSED;
  };

type ProofRecord :=
  mkProofRecord@{
    proof : Proof;
    verifyingKey : VerifyingKey;
    instance : Instance;
  };

--- The ;Delta; value zero.
zero : Delta := STILL_MISSING_ANOMA_BUILTIN;

--- Adds two ;Delta; values.
addDelta (d1 d2 : Delta) : Delta := ANOMA_BACKEND_IMPLEMENTATION;

instance
Delta-AdditivelyHomomorphic : AdditivelyHomomorphic Delta :=
  mkAdditivelyHomomorphic@{
    add (a b : Delta) : Delta := addDelta a b;
  };

instance
Delta-KindDistinct : KindDistinct Delta :=
  mkKindDistinct@{
    add (a b : Delta) : Delta := addDelta a b;
  };

deriving instance
Delta-Ord : Ord Delta;

deriving instance
Delta-Eq : Eq Delta;

deriving instance
Proof-Ord : Ord Proof;

deriving instance
Proof-Eq : Eq Proof;

deriving instance
VerifyingKey-Ord : Ord VerifyingKey;

deriving instance
VerifyingKey-Eq : Eq VerifyingKey;

deriving instance
Instance-Ord : Ord Instance;

deriving instance
Instance-Eq : Eq Instance;

deriving instance
Witness-Ord : Ord Witness;

deriving instance
Witness-Eq : Eq Witness;

deriving instance
ProofRecord-Ord : Ord ProofRecord;

deriving instance
ProofRecord-Eq : Eq ProofRecord;
