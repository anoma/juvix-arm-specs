module Anoma.Resource.Types;

import Stdlib.Prelude open;
import Stdlib.Trait.Ord.Eq open using {fromOrdToEq};
import Anoma.Builtin.ByteArray open using {ByteArray};
import Anoma.Builtin.System open using {anomaEncode; AnomaOpaque};
import Anoma.Primitives.FixedSize open;
import Anoma.Builtin.ByteArray open;
import Anoma.Utils open;

--- A fixed-size data type encoding the reference to the resource logic function.
--- NOTE: For the private testnet, the requirement can be relaxed by allowing ;LogicRef; to be dynamically-sized.
type LogicRef :=
  mkLogicRef@{
    unLogicRef : AnomaOpaque;
  };

--- A fixed-size data type encoding the reference to the resource label field.
--- NOTE: For the private testnet, the requirement can be relaxed by allowing ;LabelRef; to be dynamically-sized.
type LabelRef :=
  mkLabelRef@{
    unLabelRef : AnomaOpaque;
  };

--- A fixed-size data type encoding the reference to the resource value field.
--- NOTE: For the private testnet, the requirement can be relaxed by allowing ;ValueRef; to be dynamically-sized.
type ValueRef :=
  mkValueRef@{
    unValueRef : AnomaOpaque;
  };

--- A fixed-size data type encoding the quantity of a resource.
type Quantity :=
  mkQuantity@{
    unQuantity : Nat;
  };

--- A fixed-size data type encoding the public commitment to the private nullifier key.
type NullifierKeyCommitment :=
  mkNullifierKeyCommitment@{
    unNullifierKeyCommitment : ByteArray;
  };

--- A fixed-size data type encoding a number to be used once ensuring that the resource commitment is unique.
--- NOTE: This should be a number having an at most negligible chance of repeating is sufficient, e.g., a pseudo-random number.
type Nonce :=
  mkNonce@{
    unNonce : ByteArray;
  };

--- A fixed-size data type encoding a randomness seed.
--- NOTE: This seed provides pseudo randomness and cannot be expected to provide true randomness.
type RandSeed :=
  mkRandSeed@{
    unRandSeed : ByteArray;
  };

--- The resource label type.
type Label :=
  mkLabel@{
    unLabel : Nat;
  };

--- The resource value type.
type Value :=
  mkValue@{
    unValue : Nat;
  };

--- The resource kind type.
type Kind :=
  mkKind@{
    unKind : Nat;
  };

--- The resource commitment type.
type Commitment :=
  mkCommitment@{
    unCommitment : ByteArray;
  };

--- The resource nullifier type.
type Nullifier :=
  mkNullifier@{
    unNullifier : ByteArray;
  };

--- The nullifier key type describing a secret required to compute the ;Nullifier; of a resource
type NullifierKey :=
  mkNullifierKey@{
    unNullifierKey : ByteArray;
  };

deriving instance
LogicRef-Ord : Ord LogicRef;

deriving instance
LogicRef-Eq : Eq LogicRef;

deriving instance
Label-Ord : Ord Label;

deriving instance
Label-Eq : Eq Label;

deriving instance
LabelRef-Ord : Ord LabelRef;

deriving instance
LabelRef-Eq : Eq LabelRef;

deriving instance
Value-Ord : Ord Value;

deriving instance
Value-Eq : Eq Value;

deriving instance
ValueRef-Ord : Ord ValueRef;

deriving instance
ValueRef-Eq : Eq ValueRef;

deriving instance
Quantity-Ord : Ord Quantity;

deriving instance
Quantity-Eq : Eq Quantity;

--- Implements the ;FixedSize; trait for ;NullifierKeyCommitment;.
instance
NullifierKeyCommitment-FixedSize : FixedSize NullifierKeyCommitment :=
  mkFixedSize 32;

deriving instance
NullifierKeyCommitment-Ord : Ord NullifierKeyCommitment;

deriving instance
NullifierKeyCommitment-Eq : Eq NullifierKeyCommitment;

--- Implements the ;FixedSize; trait for ;Nonce;.
instance
Nonce-FixedSize : FixedSize Nonce := mkFixedSize 32;

deriving instance
Nonce-Ord : Ord Nonce;

deriving instance
Nonce-Eq : Eq Nonce;

instance
Quantity-Natural : Natural Quantity :=
  mkNatural@{
    + (b1 b2 : Quantity) : Quantity :=
      mkQuantity
        ((Natural.+) (Quantity.unQuantity b1) (Quantity.unQuantity b2));
    * (b1 b2 : Quantity) : Quantity :=
      mkQuantity
        ((Natural.*) (Quantity.unQuantity b1) (Quantity.unQuantity b2));
  };

instance
Quantity-FromNatural : FromNatural Quantity :=
  mkFromNatural@{
    fromNat (n : Nat) : Quantity := mkQuantity n;
  };

instance
RandSeed-FixedSize : FixedSize RandSeed := mkFixedSize 32;

deriving instance
RandSeed-Ord : Ord RandSeed;

deriving instance
RandSeed-Eq : Eq RandSeed;

deriving instance
Commitment-Ord : Ord Commitment;

deriving instance
Commitment-Eq : Eq Commitment;

deriving instance
Nullifier-Ord : Ord Nullifier;

deriving instance
Nullifier-Eq : Eq Nullifier;

--- Implements the ;FixedSize; trait for ;NullifierKey;.
instance
NullifierKey-FixedSize : FixedSize NullifierKey := mkFixedSize 64;

deriving instance
NullifierKey-Ord : Ord NullifierKey;

deriving instance
NullifierKey-Eq : Eq NullifierKey;
