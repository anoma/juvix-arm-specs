module Anoma.Resource.Types;

import Stdlib.Prelude open using {Nat};
import Anoma.Types open using {PrivateKey};

--- A fixed-size data type encoding the reference to the resource logic function.
--- NOTE: For the private testnet, the requirement can be relaxed by allowing ;LogicRef; to be dynamically-sized.
type LogicRef := mkLogicRef {unLogicRef : Nat};

--- A fixed-size data type encoding the reference to the resource label field.
--- NOTE: For the private testnet, the requirement can be relaxed by allowing ;LabelRef; to be dynamically-sized.
type LabelRef := mkLabelRef {unLabelRef : Nat};

--- A fixed-size data type encoding the reference to the resource value field.
--- NOTE: For the private testnet, the requirement can be relaxed by allowing ;ValueRef; to be dynamically-sized.
type ValueRef := mkValueRef {unValueRef : Nat};

--- A fixed-size data type encoding the quantity of a resource.
type Quantity := mkQuantity {unQuantity : Nat};

--- A fixed-size data type encoding the public commitment to the private nullifier key.
type NullifierKeyCommitment := mkNullifierKeyCommitment {unNullifierKeyCommitment : Nat};

--- A fixed-size data type encoding a number to be used once ensuring that the resource commitment is unique.
--- NOTE: This should be a number having an at most negligible chance of repeating is sufficient, e.g., a pseudo-random number.
type Nonce := mkNonce {unNonce : Nat};

--- A fixed-size data type encoding a randomness seed.
--- NOTE: This seed provides pseudo randomness and cannot be expected to provide true randomness.
type RandSeed := mkRandSeed {unRandSeed : Nat};

--- The resource label type.
type Label := mkLabel {unLabel : Nat};

--- The resource value type.
type Value := mkValue {unValue : Nat};

--- The resource kind type.
type Kind := mkKind {unKind : Nat};

--- The resource commitment type.
type Commitment := mkCommitment {unCommitment : Nat};

--- The resource nullifier type.
type Nullifier := mkNullifier {unNullifier : Nat};

--- The nullifier key type describing a secret required to compute the ;Nullifier; of a resource
type NullifierKey := mkNullifierKey {unNullifierKey : PrivateKey};
