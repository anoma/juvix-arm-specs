module Anoma.Resource.Types;

import Stdlib.Prelude open;
import Stdlib.Trait.Ord.Eq open using {fromOrdToEq};
import Anoma.Utils open;
import Anoma.Base as Base;

--- A fixed-size data type encoding the reference to the resource logic function.
--- NOTE: For the private testnet, the requirement can be relaxed by allowing ;LogicRef; to be dynamically-sized.
type LogicRef := mkLogicRef@{unLogicRef : Base.Resource.Logic};

--- A fixed-size data type encoding the reference to the resource label field.
--- NOTE: For the private testnet, the requirement can be relaxed by allowing ;LabelRef; to be dynamically-sized.
type LabelRef := mkLabelRef@{unLabelRef : Base.Resource.Label};

--- A fixed-size data type encoding the reference to the resource value field.
--- NOTE: For the private testnet, the requirement can be relaxed by allowing ;ValueRef; to be dynamically-sized.
type ValueRef := mkValueRef@{unValueRef : Base.Resource.Value};

--- A fixed-size data type encoding the quantity of a resource.
type Quantity := mkQuantity@{unQuantity : Base.Resource.Quantity};

--- A fixed-size data type encoding the public commitment to the private nullifier key.
type NullifierKeyCommitment :=
  mkNullifierKeyCommitment@{unNullifierKeyCommitment : Base.Resource.NullifierKeyCommitment};

--- A fixed-size data type encoding a number to be used once ensuring that the resource commitment is unique.
--- NOTE: This should be a number having an at most negligible chance of repeating is sufficient, e.g., a pseudo-random number.
type Nonce := mkNonce@{unNonce : Base.Resource.Nonce};

--- A fixed-size data type encoding a randomness seed.
--- NOTE: This seed provides pseudo randomness and cannot be expected to provide true randomness.
type RandSeed := mkRandSeed@{unRandSeed : Base.Resource.RSeed};

--- The resource label type.
type Label := mkLabel@{unLabel : Base.Resource.Label};

--- The resource value type.
type Value := mkValue@{unValue : Base.Resource.Value};

--- The resource kind type.
type Kind := mkKind@{unKind : Base.Kind};

--- The resource commitment type.
type Commitment := mkCommitment@{unCommitment : Base.Commitment};

--- The resource nullifier type.
type Nullifier := mkNullifier@{unNullifier : Base.Nullifier};

--- The nullifier key type describing a secret required to compute the ;Nullifier; of a resource
type NullifierKey := mkNullifierKey@{unNullifierKey : MISSING_DEFINITION};

module LogicRefInternal;
  --- Compares two ;LogicRef; objects.
  compare (lhs rhs : LogicRef) : Ordering :=
    Ord.cmp (LogicRef.unLogicRef lhs) (LogicRef.unLogicRef rhs);

  --- Implements the ;Ord; trait for ;LogicRef;.
  instance
  LogicRef-Ord : Ord LogicRef := mkOrd compare;

  --- Implements the ;Eq; trait for ;LogicRef;.
  instance
  LogicRef-Eq : Eq LogicRef := fromOrdToEq;
end;

module LabelInternal;
  --- Compares two ;Label; objects.
  compare (lhs rhs : Label) : Ordering :=
    Ord.cmp (Label.unLabel lhs) (Label.unLabel rhs);

  --- Implements the ;Ord; trait for ;Label;.
  instance
  Label-Ord : Ord Label := mkOrd compare;

  --- Implements the ;Eq; trait for ;Label;.
  instance
  Label-Eq : Eq Label := fromOrdToEq;
end;

module LabelRefInternal;
  --- Compares two ;LabelRef; objects.
  compare (lhs rhs : LabelRef) : Ordering :=
    Ord.cmp (LabelRef.unLabelRef lhs) (LabelRef.unLabelRef rhs);

  --- Implements the ;Ord; trait for ;LabelRef;.
  instance
  LabelRef-Ord : Ord LabelRef := mkOrd compare;

  --- Implements the ;Eq; trait for ;LabelRef;.
  instance
  LabelRef-Eq : Eq LabelRef := fromOrdToEq;
end;

module ValueInternal;
  --- Compares two ;Value; objects.
  compare (lhs rhs : Value) : Ordering :=
    Ord.cmp (Value.unValue lhs) (Value.unValue rhs);

  --- Implements the ;Ord; trait for ;Value;.
  instance
  Value-Ord : Ord Value := mkOrd compare;

  --- Implements the ;Eq; trait for ;Value;.
  instance
  Value-Eq : Eq Value := fromOrdToEq;
end;

module ValueRefInternal;
  --- Compares two ;ValueRef; objects.
  compare (lhs rhs : ValueRef) : Ordering :=
    Ord.cmp (ValueRef.unValueRef lhs) (ValueRef.unValueRef rhs);

  --- Implements the ;Ord; trait for ;ValueRef;.
  instance
  ValueRef-Ord : Ord ValueRef := mkOrd compare;

  --- Implements the ;Eq; trait for ;ValueRef;.
  instance
  ValueRef-Eq : Eq ValueRef := fromOrdToEq;
end;

module QuantityInternal;
  --- Compares two ;Quantity; objects.
  compare (lhs rhs : Quantity) : Ordering :=
    Ord.cmp (Quantity.unQuantity lhs) (Quantity.unQuantity rhs);

  --- Implements the ;Ord; trait for ;Quantity;.
  instance
  Quantity-Ord : Ord Quantity := mkOrd compare;

  --- Implements the ;Eq; trait for ;Quantity;.
  instance
  Quantity-Eq : Eq Quantity := fromOrdToEq;
end;

module NullifierKeyCommitmentInternal;
  --- Compares two ;NullifierKeyCommitment; objects.
  compare (lhs rhs : NullifierKeyCommitment) : Ordering :=
    Ord.cmp
      (NullifierKeyCommitment.unNullifierKeyCommitment lhs)
      (NullifierKeyCommitment.unNullifierKeyCommitment rhs);

  --- Implements the ;Ord; trait for ;NullifierKeyCommitment;.
  instance
  NullifierKeyCommitment-Ord : Ord NullifierKeyCommitment := mkOrd compare;

  --- Implements the ;Eq; trait for ;ValueRef;.
  instance
  NullifierKeyCommitment-Eq : Eq NullifierKeyCommitment := fromOrdToEq;
end;

module NonceInternal;
  --- Compares two ;Nonce; objects.
  compare (lhs rhs : Nonce) : Ordering :=
    Ord.cmp (Nonce.unNonce lhs) (Nonce.unNonce rhs);

  --- Implements the ;Ord; trait for ;Nonce;.
  instance
  Nonce-Ord : Ord Nonce := mkOrd compare;

  --- Implements the ;Eq; trait for ;Nonce;.
  instance
  Nonce-Eq : Eq Nonce := fromOrdToEq;
end;

module RandSeedInternal;
  --- Compares two ;RandSeed; objects.
  compare (lhs rhs : RandSeed) : Ordering :=
    Ord.cmp (RandSeed.unRandSeed lhs) (RandSeed.unRandSeed rhs);

  --- Implements the ;Ord; trait for ;RandSeed;.
  instance
  RandSeed-Ord : Ord RandSeed := mkOrd compare;

  --- Implements the ;Eq; trait for ;RandSeed;.
  instance
  RandSeed-Eq : Eq RandSeed := fromOrdToEq;
end;

module CommitmentInternal;
  --- Compares two ;Commitment; and returns their ;Ordering;.
  compare (lhs rhs : Commitment) : Ordering := MISSING_ANOMA_BUILTIN;

  --- Implements the ;Ord; trait for ;Commitment;.
  instance
  Commitment-Ord : Ord Commitment := mkOrd compare;

  --- Implements the ;Eq; trait for ;Commitment;.
  instance
  Commitment-Eq : Eq Commitment := fromOrdToEq;
end;

module NullifierInternal;
  --- Compares two ;Nullifier; and returns their ;Ordering;.
  compare (lhs rhs : Nullifier) : Ordering := MISSING_ANOMA_BUILTIN;

  --- Implements the ;Ord; trait for ;Nullifier;.
  instance
  Nullifier-Ord : Ord Nullifier := mkOrd compare;

  --- Implements the ;Eq; trait for ;Nullifier;.
  instance
  Nullifier-Eq : Eq Nullifier := fromOrdToEq;
end;
