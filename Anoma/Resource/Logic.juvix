module Anoma.Resource.Logic;

import Stdlib.Prelude open;
import Anoma.System open using {anomaEncode};
import Anoma.Utils open using {Ref; mkRef};
import Anoma.Resource.Types open using {LogicRef; mkLogicRef};
import Anoma.ProvingSystem.ResourceLogicProof as ResourceLogicProvingSystem;

--- The resource logic function signature.
--- NOTE: Logic as a program is not defined in the spec.
Logic : Type :=
  (publicInputs : ResourceLogicProvingSystem.Instance)
    -> (privateInputs : ResourceLogicProvingSystem.Witness)
    -> Bool;

--- Computes the ;LogicRef; from the ;Logic; function.
--- NOTE: For the private testnet, this is allowed to be the identity function.
--- TODO This should be an anoma builtin.
logicRef (logic : Logic) : LogicRef := logic |> anomaEncode |> mkLogicRef;

--- Implements the ;Ref; trait for ;Logic;.
instance
Logic-Ref : Ref Logic LogicRef := mkRef logicRef;
