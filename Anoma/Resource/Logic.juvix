module Anoma.Resource.Logic;

import Stdlib.Prelude open;
import Data.Set as Set open using {Set};
import Anoma.Resource.Types open using {Resource; Ref; mkRef; LogicRef} public;
import Anoma.Resource.Computable.Commitment open using {Commitment};
import Anoma.Resource.Computable.Nullifier open using {Nullifier};
import Anoma.ProvingSystem.ResourceLogicProof as ResourceLogicProvingSystem;

--- The resource logic function signature.
--- NOTE: Logic as a program is not defined in the spec.
Logic : Type := ResourceLogicProvingSystem.Instance -> ResourceLogicProvingSystem.Witness -> Bool;

--- Computes the ;LogicRef; from the ;Logic; function.
--- NOTE: For the private testnet, this is allowed to be the identity function.
axiom logicRef : Logic -> LogicRef;

--- Implements the ;Ref; trait for ;Logic;.
instance
Logic-Ref : Ref Logic LogicRef :=
  mkRef@{
    ref (logic : Logic) : LogicRef := logicRef logic
  };
