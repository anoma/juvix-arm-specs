module Anoma.Resource.BindingReference;

import Anoma.Resource.Types open using {
  Label;
  LabelRef;
  Value;
  ValueRef;
  LogicRef;
};
import Anoma.Logic open using {Logic};
import Anoma.Utils open;

--- A trait for transforming values of a ;DataType; into values of its
--- corresponding ;RefType;. Values of ;RefType; must have fixed size. For the
--- private testnet, the requirement can be relaxed by allowing ;RefType; to be
--- dynamically-sized.
trait
type BindingReference DataType RefType :=
  mkReference@{
    --- Computes the RefType from the DataType.
    to : DataType -> RefType;
    --- Computes the DataType from the RefType.
    from : RefType -> DataType;
  };

--- Implements the ;BindingReference; trait for ;Label;.
instance
Label-BindingReference : BindingReference Label LabelRef :=
  mkReference@{
    to := MISSING_JUVIX_IMPLEMENTATION;
    from := MISSING_JUVIX_IMPLEMENTATION;
  };

--- Implements the ;BindingReference; trait for ;Logic;.
instance
Logic-BindingReference : BindingReference Logic LogicRef :=
  mkReference@{
    to := MISSING_JUVIX_IMPLEMENTATION;
    from := MISSING_JUVIX_IMPLEMENTATION;
  };

--- Implements the ;BindingReference; trait for ;Value;.
instance
Value-BindingReference : BindingReference Value ValueRef :=
  mkReference@{
    to := MISSING_JUVIX_IMPLEMENTATION;
    from := MISSING_JUVIX_IMPLEMENTATION;
  };
