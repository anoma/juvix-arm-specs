module Anoma.Resource.BindingReference;

import Stdlib.Prelude open;
import Stdlib.Debug.Fail open using {failwith};

import Anoma.Resource.Types open using {
  Label;
  LabelRef;
  Value;
  ValueRef;
  LogicRef;
};
import Anoma.Logic open using {Logic};
import Anoma.Utils open;

--- A trait for transforming values of a ;DataType; into values of its
--- corresponding ;RefType;. Values of ;RefType; must have fixed size. For the
--- private testnet, the requirement can be relaxed by allowing ;RefType; to be
--- dynamically-sized.
trait
type BindingReference DataType RefType :=
  mkBindingReference@{
    --- Computes the binding reference (RefType) from the data (DataType).
    compute : (data : DataType) -> RefType;
    --- Checks whether a particular piece of data matches a binding reference.
    check : (reference : RefType) -> (data : DataType) -> Bool;
  };

--- Implements the ;BindingReference; trait for ;Label;.
instance
Label-BindingReference : BindingReference Label LabelRef :=
  mkBindingReference@{
    compute := MISSING_JUVIX_IMPLEMENTATION;
    check := MISSING_JUVIX_IMPLEMENTATION;
  };

--- Implements the ;BindingReference; trait for ;Logic;.
instance
Logic-BindingReference : BindingReference Logic LogicRef :=
  mkBindingReference@{
    compute := MISSING_JUVIX_IMPLEMENTATION;
    check := MISSING_JUVIX_IMPLEMENTATION;
  };

--- Implements the ;BindingReference; trait for ;Value;.
instance
Value-BindingReference : BindingReference Value ValueRef :=
  mkBindingReference@{
    compute := MISSING_JUVIX_IMPLEMENTATION;
    check := MISSING_JUVIX_IMPLEMENTATION;
  };

lookupFromReference
  {DataType}
  {RefType}
  {{BindingReference DataType RefType}}
  (reference : RefType)
  : Maybe DataType := MISSING_JUVIX_IMPLEMENTATION;

lookupFromReferenceChecked
  {DataType}
  {RefType}
  {{BindingReference DataType RefType}}
  (reference : RefType)
  : DataType :=
  case
    lookupFromReference@{
      reference;
    }
  of
    | nothing := failwith "The referenced data could not be found."
    | just data :=
      if
        | BindingReference.check reference data := data
        | else :=
          failwith "The fetched data does not match the referenced data.";
