module Anoma.Resource.Computable.Delta;

import Stdlib.Prelude open;
import Anoma.Delta open using {Delta; mkDeltaComponent};
import Anoma.Resource.Object open using {Resource; module Resource};
import Anoma.Resource.Types open using {Kind; Quantity};
import Anoma.Resource.Computable.Kind as Computable open using {kind};

module ResourceDeltaInternal;
  --- The delta function as defined in the RM specs.
  --- NOTE: This definition does not specify that the ;Kind; and ;Quantity; arguments
  --- must come from the same ;Resource; although this must be the case.
  --- TODO This should be an Anoma builtin.
  delta (kind : Kind) (quantity : Quantity) : Delta :=
    [ mkDeltaComponent@{
      kind;
      quantity;
      -- TODO this sign should be removed from here.
      sign := true
    }
    ];
end;

--- Computes the ;Delta; value of a given ;Resource;.
delta (resource : Resource) : Delta :=
  ResourceDeltaInternal.delta@{
    kind := Computable.kind resource;
    quantity := Resource.quantity resource
  };
