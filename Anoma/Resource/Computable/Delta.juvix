module Anoma.Resource.Computable.Delta;

import Anoma.Delta open using {Delta};
import Anoma.Resource.Object open using {Resource; module Resource};
import Anoma.Resource.Types open using {Kind; Quantity};
import Anoma.Resource.Computable.Kind open using {kind as kind'};

module ResourceDeltaInternal;
  --- The delta function as defined in the RM specs.
  --- NOTE: This definition does not specify that the ;Kind; and ;Quantity; arguments
  --- must come from the same ;Resource; although this must be the case.
  --- TODO
 axiom delta : (kind : Kind) -> (quantity : Quantity) -> Delta;
end;

--- Computes the ;Delta; value of a given ;Resource;.
delta (resource : Resource) : Delta :=
  ResourceDeltaInternal.delta@{
    kind := kind' resource;
    quantity := Resource.quantity resource
  };
