module Anoma.Resource.Computable.Commitment;

import Stdlib.Prelude open;
import Stdlib.Trait.Ord.Eq open using {fromOrdToEq};
import Anoma.Resource.Types open using {Commitment; module Commitment; mkCommitment};
import Anoma.Resource.Object open using {Resource};
import Anoma.Utils open using {MISSING_ANOMA_BUILTIN};

--- Computes the ;Commitment; of a ;Resource;.
--- TODO This should be an Anoma builtin.
commitment (resource : Resource) : Commitment := MISSING_ANOMA_BUILTIN;

module CommitmentInternal;
  --- Compares two ;Commitment; and returns their ;Ordering;.
  compare (lhs rhs : Commitment) : Ordering :=
    Ord.cmp (Commitment.unCommitment lhs) (Commitment.unCommitment rhs);

  --- Implements the ;Ord; trait for ;Commitment;.
  instance
  Commitment-Ord : Ord Commitment := mkOrd compare;

  --- Implements the ;Eq; trait for ;Commitment;.
  instance
  Commitment-Eq : Eq Commitment := fromOrdToEq;
end;
