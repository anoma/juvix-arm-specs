module Anoma.Resource.Computable.Nullifier;

import Stdlib.Prelude open;
import Stdlib.Trait.Ord.Eq open using {fromOrdToEq};
import Data.Set as Set open using {Set};
import Anoma.System open using {anomaEncode};
import Anoma.Types open using {PrivateKey};
import Anoma.Rep as Rep open;
import Anoma.System open;
import Anoma.Resource.Types as Resource open using {Resource};

--- The fixed-size type describing a secret required to compute the ;Nullifier; of a ;Resource;.
--- TODO
type Nullifier := mkNullifier {unNullifier : Nat};

--- The fixed-size type describing the nullfier of a resource.
--- TODO
type NullifierKey := mkNullifierKey {unNullifierKey : PrivateKey};

--- Computes the ;Nullifier; of a ;Resource; given a ;NullifierKey;.
--- https://github.com/anoma/anoma/blob/d6a61451ae8fd0f046c083f5ca4a4f38e7ecffb1/lib/anoma/resource.ex#L66
nullifier (r : Resource) (nk : NullifierKey) : Nullifier :=
  let
    n : Pair String Resource := nullifierHeader, r;
  in anomaEncode (anomaEncode n, Rep.toAtom (anomaSignDetached n (NullifierKey.unNullifierKey nk)))
    |> mkNullifier;

--- The header to use in a nullifier cell
--- https://github.com/anoma/anoma/blob/ea25f88cea52226d77c8392ae16bbfc5a7ffccee/lib/anoma/resource.ex#L36
nullifierHeader : String := "annullo";

module NullfierInternal;
  --- Compares two ;Nullifier; and returns their ;Ordering;.
  compare (lhs rhs : Nullifier) : Ordering :=
    Ord.cmp (Nullifier.unNullifier lhs) (Nullifier.unNullifier rhs);

  --- Implements the ;Ord; trait for ;Nullifier;.
  instance
  Nullifier-Ord : Ord Nullifier := mkOrd compare;

  --- Implements the ;Eq; trait for ;Nullifier;.
  instance
  Nullifier-Eq : Eq Nullifier := fromOrdToEq;
end;
