module Anoma.Identity.External;

import Stdlib.Prelude open;
import Stdlib.Trait.Ord.Eq open using {fromOrdToEq};
import Anoma.Builtin.ByteArray open using {ByteArray; module ByteArrayInternal};

--- A fixed-size data type describing an external identity.
type ExternalIdentity :=
  mkExternalIdentity@{
    unExternalIdentity : ByteArray;
  };

module ExternalIdentityInternal;
  --- Compares two ;ExternalIdentity; objects.
  compare (lhs rhs : ExternalIdentity) : Ordering :=
    Ord.cmp
      (ExternalIdentity.unExternalIdentity lhs)
      (ExternalIdentity.unExternalIdentity rhs);

  --- Implements the ;Ord; trait for ;ExternalIdentity;.
  instance
  ExternalIdentity-Ord : Ord ExternalIdentity := mkOrd compare;

  --- Implements the ;Eq; trait for ;ExternalIdentity;.
  instance
  ExternalIdentity-Eq : Eq ExternalIdentity := fromOrdToEq;
end;

instance
ExternalIdentity-Show : Show ExternalIdentity :=
  mkShow
    \{id :=
      id
        |> ExternalIdentity.unExternalIdentity
        |> ByteArrayInternal.toAnomaByteArray
        |> natToString};
