module Anoma.Identity.Internal;

import Stdlib.Prelude open;
import Stdlib.Trait.Ord.Eq open using {fromOrdToEq};
import Anoma.Builtin.ByteArray open using {ByteArray; toAnomaContents};

--- A fixed-size data type describing an internal identity.
type InternalIdentity := mkInternalIdentity@{unInternalIdentity : ByteArray};

module InternalIdentityInternal;
  --- Compares two ;InternalIdentity; objects.
  compare (lhs rhs : InternalIdentity) : Ordering :=
    Ord.cmp
      (InternalIdentity.unInternalIdentity lhs)
      (InternalIdentity.unInternalIdentity rhs);

  --- Implements the ;Ord; trait for ;InternalIdentity;.
  instance
  InternalIdentity-Ord : Ord InternalIdentity := mkOrd compare;

  --- Implements the ;Eq; trait for ;InternalIdentity;.
  instance
  InternalIdentity-Eq : Eq InternalIdentity := fromOrdToEq;
end;

instance
InternalIdentity-Show : Show InternalIdentity :=
  mkShow
    \{id :=
      id
        |> InternalIdentity.unInternalIdentity
        |> toAnomaContents
        |> natToString};
