module Anoma.Identity.Signing.Types;

import Stdlib.Prelude open;
import Anoma.Identity.Internal open;
import Anoma.Identity.External open;
import Anoma.Builtin.ByteArray as ByteArray open;
import Anoma.Builtin.System as SystemBuiltins open;

type Signature := mkSignature {unSignature : ByteArray};

{-# inline: true #-}
verify
  : {Message : Type}
    -- | The signature to verify.
    -> Signature
    -- | The message to verify against.
    -> Message
    -- | The signer external identity to verify against.
    -> ExternalIdentity
    -- | The verification result.
    -> Bool
  | (mkSignature signature) message externalIdentity :=
    SystemBuiltins.anomaVerifyDetached
      signature
      message
      (ExternalIdentity.unExternalIdentity externalIdentity);

{-# inline: true #-}
sign
  : {Message : Type}
    -- | The message to sign.
    -> Message
    -- | The signing internal identity.
    -> InternalIdentity
    -- | The resulting signature
    -> Signature
  | message internalIdentity :=
    SystemBuiltins.anomaSign message (InternalIdentity.unInternalIdentity internalIdentity)
      |> mkSignature;

--- TODO Consider deleting the definitions below.
module NonDetached;
  type SignedMessage := mkSignedMessage {unSignedMessage : ByteArray};

  {-# inline: true #-}
  verify (signedMessage : SignedMessage) (externalIdentity : ExternalIdentity) : Bool :=
    case verifyWithMessage {Unit} signedMessage externalIdentity of
      | just _ := true
      | nothing := false;

  {-# inline: true #-}
  verifyWithMessage
    : {Message : Type}
      -- | The signed message to verify.
      -> SignedMessage
      -- | The signer external identity to verify against.
      -> ExternalIdentity
      -- | The original message.
      -> Maybe Message
    | (mkSignedMessage signedMessage) externalIdentity :=
      SystemBuiltins.anomaVerifyWithMessage
        signedMessage
        (ExternalIdentity.unExternalIdentity externalIdentity);

  {-# inline: true #-}
  sign
    : {Message : Type}
      -- | The message to sign.
      -> Message
      -- | The signing internal identity.
      -> InternalIdentity
      -- | The resulting signed message.
      -> SignedMessage
    | message internalIdentity :=
      SystemBuiltins.anomaSign message (InternalIdentity.unInternalIdentity internalIdentity)
        |> mkSignedMessage;
end;
