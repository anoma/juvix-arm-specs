module Anoma.Proving.System;

import Stdlib.Prelude open;
import Anoma.Proving.Types open;

--- The interface of the resource machine proving system.
--- Proof: A fixed-size data type encoding a proof.
--- VerifyingKey: A fixed-size data type encoding a verifying key containing the data.
--- ProvingKey: A fixed-size data type encoding a proving key containing the data.
--- Instance: The subset of inputs required to both create and verify a proof.
--- Witness: The subset of inputs used to produce but not verify a proof.
trait
type ProvingSystem Proof VerifyingKey ProvingKey Instance Witness :=
  mkProvingSystem {
    --- Creates a proof given a proving key, public inputs (Instance), and
    --- private inputs (Witness).
    prove : (provingKey : ProvingKey)
      -> (publicInputs : Instance)
      -> (privateInputs : Witness)
      -> Proof;

    --- Verfies a ;ProofRecord;.
    verify : (proofRecord : ProofRecord Proof VerifyingKey Witness) -> Bool
  };
