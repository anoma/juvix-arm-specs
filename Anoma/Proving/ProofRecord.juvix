module Anoma.Proving.ProofRecord;

import Stdlib.Prelude open;
import Anoma.Proving.ComplianceProof as ComplianceProof;
import Anoma.Proving.LogicProof as LogicProof;
import Anoma.Proving.DeltaProof as DeltaProof;
import Data.Set as Set open using {Set};
import Anoma.Utils open;

--- A wrapper type for all of the supported proof record types.
type ProofRecord :=
  | Compliance ComplianceProof.ProofRecord
  | Logic LogicProof.ProofRecord
  | Delta DeltaProof.ProofRecord;

module ProofRecordInternal;
  instance
  ProofRecord-Ord : Ord ProofRecord :=
    -- lexicographical ordering with `ComplianceProofRecord _ < LogicProofRecord _ < DeltaProofRecord _`.
    mkOrd@{
      cmp (p1 p2 : ProofRecord) : Ordering :=
        case p1, p2 of
          | Compliance c1, Compliance c2 := Ord.cmp c1 c2
          | Logic r1, Logic r2 := Ord.cmp r1 r2
          | Delta d1, Delta d2 := Ord.cmp d1 d2
          | Compliance _, _ := LT
          | Logic _, Compliance _ := GT
          | Logic _, Delta _ := LT
          | Delta _, _ := GT
    };

end;

--- NOTE: At verification time, a proof record set must contain exactly one ;DeltaProof.ProofRecord;.
verifyProofRecords (proofRecords : Set ProofRecord) : Bool := NOT_REQUIRED;
