module Anoma.Proving.ProofRecord;

import Stdlib.Prelude open;
import Anoma.Proving.ComplianceProof as ComplianceProof;
import Anoma.Proving.ResourceLogicProof as ResourceLogicProof;
import Anoma.Proving.DeltaProof as DeltaProof;
import Data.Set as Set open using {Set};
import Anoma.Utils open;

--- A wrapper type for all of the supported proof record types.
type ProofRecord :=
  | proofRecordCompliance ComplianceProof.ProofRecord
  | proofRecordResourceLogic ResourceLogicProof.ProofRecord
  | proofRecordDelta DeltaProof.ProofRecord;

module ProofRecordInternal;
  instance
  ProofRecord-Ord : Ord ProofRecord :=
    mkOrd@{
      cmp (p1 p2 : ProofRecord) : Ordering :=
        case p1, p2 of
          | proofRecordCompliance c1, proofRecordCompliance c2 := Ord.cmp c1 c2
          | proofRecordResourceLogic r1, proofRecordResourceLogic r2 := Ord.cmp r1 r2
          | proofRecordDelta d1, proofRecordDelta d2 := Ord.cmp d1 d2
          | _, _ := LT
    };

end;

--- NOTE: At verification time, a proof record set must contain exactly one ;DeltaProof.ProofRecord;.
verifyProofRecords (proofRecords : Set ProofRecord) : Bool := NOT_REQUIRED;
