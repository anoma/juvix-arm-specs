--- An instantiation of a proving System for resource logic proofs.
module Anoma.Proving.LogicProof;

import Stdlib.Prelude open;
import Stdlib.Trait.Ord.Eq open using {fromOrdToEq};
import Anoma.Proving.Types open using {module Logic};
import Anoma.Utils open;

type ProofRecord :=
  mkProofRecord {
    proof : Logic.Proof;
    verifyingKey : Logic.VerifyingKey;
    instance : Logic.Instance
  };

prove
  (provingKey : Logic.ProvingKey)
  (publicInputs : Logic.Instance)
  (privateInputs : Logic.Witness)
  : Logic.Proof := MISSING_ANOMA_BUILTIN;

verify (proofRecord : ProofRecord) : Bool := MISSING_ANOMA_BUILTIN;

module ProofRecordInternal;
  --- Compares two ;ProofRecord; objects.
  compare (lhs rhs : ProofRecord) : Ordering :=
    let
      prod (p : ProofRecord) : _ :=
        ProofRecord.proof p, ProofRecord.verifyingKey p, ProofRecord.instance p;
    in Ord.cmp (prod lhs) (prod rhs);

  --- Implements the ;Ord; trait for ;ProofRecord;.
  instance
  ProofRecord-Ord : Ord ProofRecord := mkOrd compare;

  --- Implements the ;Eq; trait for ;ProofRecord;.
  instance
  ProofRecord-Eq : Eq ProofRecord := fromOrdToEq;
end;
