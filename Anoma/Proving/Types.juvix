module Anoma.Proving.Types;

import Stdlib.Prelude open;
import Data.Set as Set open using {Set};
import Anoma.Resource.Object open using {Resource};
import Anoma.Resource.Types open using {Commitment; Nullifier};

--- A record describing a proof record, a map entry constituted by a VerifyingKey as the lookup-key
--- and a Proof and associated Witness as the value.
ProofRecord (Proof VerifyingKey Witness : Type) : Type := Pair VerifyingKey (Pair Proof Witness);

module Delta;
  axiom Proof : Type;

  axiom VerifyingKey : Type;

  axiom ProvingKey : Type;

  axiom Instance : Type;

  axiom Witness : Type;
end;

module ResourceLogic;
  axiom Proof : Type;

  axiom VerifyingKey : Type;

  axiom ProvingKey : Type;

  --- The reference to the ;Resource; carrying the logic function.
  type Tag :=
    | Created Commitment
    | Consumed Nullifier;

  --- The public inputs (Instance) of the resource logic function proof.
  type Instance :=
    mkInstance {
      tag : Tag;
      commitments : Set Commitment;
      nullifiers : Set Nullifier;
      custom : InstanceCustomInputs
    };

  --- Custom public inputs of the resource logic function proof being defined on the application level.
  axiom InstanceCustomInputs : Type;

  --- The private inputs (Witness) of the resource logic function proof.
  type Witness :=
    mkWitness {
      created : Set Resource;
      consumed : Set Resource;
      custom : WitnessCustomInputs
    };

  --- Custom private inputs of the resource logic function proof being defined on the application level.
  axiom WitnessCustomInputs : Type;
end;

module Compliance;
  axiom Proof : Type;

  axiom VerifyingKey : Type;

  axiom ProvingKey : Type;

  axiom Instance : Type;

  axiom Witness : Type;
end;
