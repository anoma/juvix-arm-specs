module Anoma.Proving.Types;

import Stdlib.Prelude open using {Pair};
import Anoma.Resource.Index as Resource open using {Witness};

--- A record describing a proof record, a map entry constituted by a VerifyingKey as the lookup-key
--- and a Proof and associated Witness as the value.
ProofRecord (Proof VerifyingKey Witness : Type) : Type := Pair VerifyingKey (Pair Proof Resource.Witness);

module DeltaProof;
  --- Aggregates two delta ;ProofRecord;s.
  axiom aggregate : (Proof VerifyingKey Witness : Type) -> (p1 p2 : ProofRecord Proof VerifyingKey Witness) -> ProofRecord Proof VerifyingKey Witness;
end;

--- A set of ProofRecords.
---
--- Each ProofRecord in the set may be parameterized with different types for
--- Proof, VerifyingKey and Witness, allowing for heterogeneous ProofRecords
--- within the set. It's not currently possible to represent such a set in Juvix.
axiom ProofRecordSet : Type;

module ProofRecordSet;

  axiom empty : ProofRecordSet;

end;
