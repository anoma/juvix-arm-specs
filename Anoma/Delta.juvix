module Anoma.Delta;

import Stdlib.Prelude open;
import Anoma.Math as Math open;
import Anoma.Resource.Types open using {Quantity; Kind};
import Anoma.Utils open;

--- TODO Is this the correct type?
Delta : Type := List DeltaComponent;

type DeltaComponent :=
  mkDeltaComponent {
    kind : Kind;
    quantity : Quantity;
    -- TODO Should this be removed?
    sign : Bool
  };

--- Adds two ;Delta; values.
addDelta (d1 d2 : Delta) : Delta := MISSING_ANOMA_BUILTIN;

-- NOTE: THIS IS NOT PART OF THE SPEC
-- TODO Should this be an Anoma builtin?
-- subDelta (d1 d2 : Delta) : Delta := MISSING_ANOMA_BUILTIN;

--- The ;Delta; value zero.
zero : Delta := [];

--- Implements the ;Math.AdditivelyHomomorphic; trait for ;Delta;.
instance
Delta-AdditivelyHomomorphic : Math.AdditivelyHomomorphic Delta :=
  Math.mkAdditivelyHomomorphic@{
    add (a b : Delta) : Delta := addDelta a b
  };

--- Implements the ;Math.KindDistinct; trait for ;Delta;.
instance
Delta-KindDistinct : Math.KindDistinct Delta :=
  Math.mkKindDistinct@{
    add (a b : Delta) : Delta := addDelta a b
  };
