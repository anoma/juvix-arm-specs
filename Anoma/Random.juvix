module Anoma.Random;

import Stdlib.Prelude open;
import Anoma.Builtin.ByteArray as ByteArray open using {ByteArray};
import Anoma.Builtin.System as SystemBuiltins;
import Anoma.Builtin.System open using {
  PseudoRandomNumberGenerator;
  PRNG;
} public;
import Anoma.Resource.Types open using {
  Nonce;
  mkNonce;
  RandSeed;
  mkRandSeed;
  module RandSeed;
};

--- Creates and initializes a pure PRNG with a seed.
--- @param seed The seed.
--- @return The initialized PRNG.
{-# inline: true #-}
pseudoRandomNumberGeneratorInit (randSeed : RandSeed) : PRNG :=
  SystemBuiltins.pseudoRandomNumberGeneratorInit (RandSeed.unRandSeed randSeed);

syntax alias prngInit := pseudoRandomNumberGeneratorInit;

--- Returns two distinct PRNGs.
--- @param generator The generator to split.
--- @return A pair of two distinct PRNGs.
{-# inline: true #-}
pseudoRandomNumberGeneratorSplit (generator : PRNG) : Pair PRNG PRNG :=
  SystemBuiltins.pseudoRandomNumberGeneratorSplit generator;

syntax alias prngSplit := pseudoRandomNumberGeneratorSplit;

--- Generates pseudo-random bytes ;ByteArray; of the specified length and returns the updated PRNG.
--- @param length The number of output bytes to generate.
--- @param generator The generator to use.
--- @return A pair containing the random number and the advanced PRNG.
{-# inline: true #-}
pseudoRandomNumberGeneratorNextBytes
  (length : Nat) (generator : PRNG) : Pair ByteArray PRNG :=
  SystemBuiltins.pseudoRandomNumberGeneratorNextBytes length generator;

syntax alias prngNextBytes := pseudoRandomNumberGeneratorNextBytes;

--- Generates a pseudo-random nonce ;Nonce; and returns the updated PRNG.
--- @param generator The generator to use.
--- @return A pair containing the random number and the advanced PRNG.
generateNonce (generator : PRNG) : Pair Nonce PRNG :=
  first@{
    fun := ByteArray.toAnomaEncoded >> mkNonce;
    pair :=
      prngNextBytes@{
        length := 32;
        generator;
      };
  };

--- Generates a ;List; of pseudo-random nonces ;Nonce; and returns the updated PRNG.
--- @param count The the number of nonces to generate
--- @param generator The generator to use.
--- @return A pair containing a list of nonces and the advanced PRNG.
generateNonces (n : Nat) (generator : PRNG) : Pair (List Nonce) PRNG :=
  let
    last {A} (defaultValue : A) (list : List A) : A :=
      head defaultValue (reverse list);

    noncesAndPrngs :=
      listFor (acc := []) (_ in replicate n 0) {
        let
          lastPrng :=
            last@{
              defaultValue := generator;
              list := map snd acc;
            };
        in snoc acc (generateNonce lastPrng)
      };

    nonces :=
      listFor (acc := []) (pair in noncesAndPrngs) {
        snoc acc (fst pair)
      };
    prngs :=
      listFor (acc := []) (pair in noncesAndPrngs) {
        snoc acc (snd pair)
      };

    lastGenerator :=
      last@{
        defaultValue := generator;
        list := prngs;
      };
  in nonces, lastGenerator;

UnusedRandSeed : RandSeed := mkRandSeed 0;
