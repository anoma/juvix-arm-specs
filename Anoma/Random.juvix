module Anoma.Random;

import Stdlib.Prelude open;
import Anoma.Builtin.ByteArray as ByteArray open using {ByteArray};
import Anoma.Builtin.System as SystemBuiltins;
import Anoma.Builtin.System open using {
  PseudoRandomNumberGenerator;
  PRNG;
} public;
import Anoma.Resource.Types open using {Nonce; mkNonce};

--- Creates and initializes a pure PRNG with a seed.
--- @param seed The seed.
--- @return The initialized PRNG.
{-# inline: true #-}
pseudoRandomNumberGeneratorInit (seed : Nat) : PRNG :=
  SystemBuiltins.pseudoRandomNumberGeneratorInit seed;

syntax alias prngInit := pseudoRandomNumberGeneratorInit;

--- Returns two distinct PRNGs.
--- @param generator The generator to split.
--- @return A pair of two distinct PRNGs.
{-# inline: true #-}
pseudoRandomNumberGeneratorSplit (generator : PRNG) : Pair PRNG PRNG :=
  SystemBuiltins.pseudoRandomNumberGeneratorSplit generator;

syntax alias prngSplit := pseudoRandomNumberGeneratorSplit;

--- Generates a random number and returns the update PRNG.
--- @param outputBytes The number of output bytes to generate.
--- @param generator The generator to use.
--- @return A pair containing the random number and the advanced PRNG.
{-# inline: true #-}
pseudoRandomNumberGeneratorNextBytes
  (outputBytes : Nat) (generator : PRNG) : Pair ByteArray PRNG :=
  SystemBuiltins.pseudoRandomNumberGeneratorNextBytes outputBytes generator;

syntax alias prngNextBytes := pseudoRandomNumberGeneratorNextBytes;

pseudoRandomBytes32Nat (generator : PRNG) : Pair Nat PRNG :=
  first@{
    fun := ByteArray.toAnomaEncoded;
    pair :=
      prngNextBytes@{
        outputBytes := 32;
        generator;
      };
  };

generateNonce (generator : PRNG) : Pair Nonce PRNG :=
  first@{
    fun := mkNonce;
    pair :=
      pseudoRandomBytes32Nat@{
        generator;
      };
  };
