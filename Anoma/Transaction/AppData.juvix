module Anoma.Transaction.AppData;

import Stdlib.Prelude open;
import Stdlib.Trait.Ord.Eq open using {fromOrdToEq};
import Stdlib.Data.Map as Map open using {Map};
import Anoma.Builtin.ByteArray open using {ByteArray};
import Anoma.Utils open;

--- A data type encoding the deletion criterion.
-- TODO Add enumeration from the specs.
type DeletionCriterion :=
  | AfterBlock STILL_MISSING_DEFINITION
  | AfterTimestamp STILL_MISSING_DEFINITION
  | AfterSignatureOverData STILL_MISSING_DEFINITION
  | AfterPredicates STILL_MISSING_DEFINITION
  | StoreForever STILL_MISSING_DEFINITION;

--- A data type encoding the lookup key of application.
type AppDataKey := mkAppDataKey@{unAppDataKey : ByteArray};

--- A data type encoding the lookup value of application data.
type AppDataValue :=
  mkAppDataValue@{unAppDataValue : Pair ByteArray DeletionCriterion};

--- A type describing an app data map.
AppData : Type := Map AppDataKey AppDataValue;

module DeletionCriterionInternal;
  axiom compare : DeletionCriterion -> DeletionCriterion -> Ordering;

  --- Implements the ;Ord; trait for ;DeletionCriterion;.
  instance
  DeletionCriterion-Ord : Ord DeletionCriterion := mkOrd compare;

  --- Implements the ;Eq; trait for ;DeletionCriterion;.
  instance
  DeletionCriterion-Eq : Eq DeletionCriterion := fromOrdToEq;
end;

--- A module implementing traits for ;AppDataKey;.
module AppDataKeyInternal;
  --- Compares two ;AppDataKey;s.
  compare (lhs rhs : AppDataKey) : Ordering :=
    Ord.cmp (AppDataKey.unAppDataKey lhs) (AppDataKey.unAppDataKey rhs);

  --- Implements the ;Ord; trait for ;AppDataKey;.
  instance
  AppDataKey-Ord : Ord AppDataKey := mkOrd compare;

  --- Implements the ;Eq; trait for ;AppDataKey;.
  instance
  AppDataKey-Eq : Eq AppDataKey := fromOrdToEq;
end;

--- A module implementing traits for ;AppDataValue;.
module AppDataValueInternal;
  --- Compares two ;AppDataValue;s.
  compare (lhs rhs : AppDataValue) : Ordering :=
    Ord.cmp (AppDataValue.unAppDataValue lhs) (AppDataValue.unAppDataValue rhs);

  --- Implements the ;Ord; trait for ;AppDataValue;.
  instance
  AppDataValue-Ord : Ord AppDataValue := mkOrd compare;

  --- Implements the ;Eq; trait for ;AppDataValue;.
  instance
  AppDataValue-Eq : Eq AppDataValue := fromOrdToEq;
end;
