module Anoma.Transaction.AppData;

import Stdlib.Prelude open;
import Stdlib.Trait.Ord.Eq open using {fromOrdToEq};
import Stdlib.Data.Set as Set open using {Set};
import Anoma.Utils open;

--- A fixed-size data type encoding the lookup key of application.
type AppDataKey := mkAppDataKey@{unAppDataKey : Nat};

--- A fixed-size data type encoding the lookup value of application data.
type AppDataValue := mkAppDataValue@{unAppDataValue : Nat};

--- A type describing an app data map entry.
type AppDataEntry :=
  mkAppDataEntry@{
    key : AppDataKey;
    value : AppDataValue;
  };

--- A type describing an app data map.
AppData : Type := Set AppDataEntry;
--

--- A module implementing traits for ;AppDataKey;.
module AppDataKeyInternal;
  --- Compares two ;AppDataKey;s.
  compare (lhs rhs : AppDataKey) : Ordering :=
    Ord.cmp (AppDataKey.unAppDataKey lhs) (AppDataKey.unAppDataKey rhs);

  --- Implements the ;Ord; trait for ;AppDataKey;.
  instance
  AppDataKey-Ord : Ord AppDataKey := mkOrd compare;

  --- Implements the ;Eq; trait for ;AppDataKey;.
  instance
  AppDataKey-Eq : Eq AppDataKey := fromOrdToEq;
end;

--- A module implementing traits for ;AppDataValue;.
module AppDataValueInternal;
  --- Compares two ;AppDataValue;s.
  compare (lhs rhs : AppDataValue) : Ordering :=
    Ord.cmp (AppDataValue.unAppDataValue lhs) (AppDataValue.unAppDataValue rhs);

  --- Implements the ;Ord; trait for ;AppDataValue;.
  instance
  AppDataValue-Ord : Ord AppDataValue := mkOrd compare;

  --- Implements the ;Eq; trait for ;AppDataValue;.
  instance
  AppDataValue-Eq : Eq AppDataValue := fromOrdToEq;
end;

--- A module implementing traits for ;AppDataEntry;.
module AppDataEntryInternal;
  --- Compares two ;AppDataEntry;s.
  compare (lhs rhs : AppDataEntry) : Ordering :=
    let
      prod (entry : AppDataEntry) : _ :=
        AppDataEntry.key entry, AppDataEntry.value entry;
    in Ord.cmp (prod lhs) (prod rhs);

  --- Implements the ;Ord; trait for ;AppDataEntry;.
  instance
  AppDataEntry-Ord : Ord AppDataEntry := mkOrd compare;

  --- Implements the ;Eq; trait for ;AppDataEntry;.
  instance
  AppDataEntry-Eq : Eq AppDataEntry := fromOrdToEq;
end;
