module Anoma.Transaction.AppData;

import Stdlib.Prelude open;
import Stdlib.Data.Map as Map open using {Map};
import Anoma.Builtin.ByteArray open using {ByteArray};
import Anoma.Builtin.System open using {anomaEncode; anomaDecode};
import Anoma.Utils open;

--- A data type encoding the deletion criterion.
-- TODO Add enumeration from the specs.
type DeletionCriterion :=
  | AfterBlock STILL_MISSING_DEFINITION
  | AfterTimestamp STILL_MISSING_DEFINITION
  | AfterSignatureOverData STILL_MISSING_DEFINITION
  | AfterPredicates STILL_MISSING_DEFINITION
  | StoreForever;

--- A data type encoding the lookup key of application.
--- TODO Add an equivalent to `anomaEncode` and `anomaDecode` to be able to change this to ;ByteArray;.
type AppDataKey :=
  mkAppDataKey@{
    unAppDataKey : Nat;
  };

--- A data type encoding the lookup value of application data.
--- TODO Add an equivalent to `anomaEncode` and `anomaDecode` to be able to change this to ;ByteArray;.
type AppDataValue :=
  mkAppDataValue@{
    data : Nat;
    deletionCriterion : DeletionCriterion;
  };

--- A type describing an app data map.
AppData : Type := Map AppDataKey AppDataValue;

deriving instance
DeletionCriterion-Ord : Ord DeletionCriterion;

deriving instance
DeletionCriterion-Eq : Eq DeletionCriterion;

deriving instance
AppDataKey-Ord : Ord AppDataKey;

deriving instance
AppDataKey-Eq : Eq AppDataKey;

deriving instance
AppDataValue-Ord : Ord AppDataValue;

deriving instance
AppDataValue-Eq : Eq AppDataValue;

lookupAppData
  {Key Value : Type} (key : Key) (appData : AppData) : Maybe Value :=
  case
    Map.lookup@{
      key := anomaEncode key |> mkAppDataKey;
      map := appData;
    }
  of
    | nothing := nothing
    | just value := just (value |> AppDataValue.data |> anomaDecode);
