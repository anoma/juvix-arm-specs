module Anoma.Transaction.Types;

import Data.Set as Set open using {Set; union};
import Anoma.Transaction.Action open using {Action; compose};
import Anoma.State.CommitmentTree as CommitmentTree open using {Root};
import Anoma.Delta as Delta open using {Delta};
import Anoma.MathProperty open;
import Anoma.Proving.Types open;

positive
type Transaction :=
  mkTransaction {
    roots : Set CommitmentTree.Root;
    actions : Set Action;
    delta : Delta;
    deltaProof : ProofRecord
  };

Constructor : Type := Set CommitmentTree.Root -> Set Action -> Delta -> ProofRecord -> Transaction;

compose (tx1 tx2 : Transaction) : Transaction :=
  mkTransaction@{
    roots :=
      union@{
        s1 := Transaction.roots tx1;
        s2 := Transaction.roots tx2
      };
    actions :=
      union@{
        s1 := Transaction.actions tx1;
        s2 := Transaction.actions tx2
      };
    delta := AdditivelyHomomorphic.add (Transaction.delta tx1) (Transaction.delta tx2);
    -- TODO Use named syntax once fixed
    -- AdditivelyHomomorphic.add@{
    --   v1 := Transaction.delta tx1;
    --   v2 := Transaction.delta tx2
    -- };
    deltaProof :=
      DeltaProof.aggregate@{
        p1 := Transaction.deltaProof tx1;
        p2 := Transaction.deltaProof tx2
      }
  };
