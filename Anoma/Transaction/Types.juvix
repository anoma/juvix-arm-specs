module Anoma.Transaction.Types;

import Data.Set as Set open using {Set; union};
import Stdlib.Prelude open using {for};
import Anoma.Resource.Computable.Commitment as Resource open using {Commitment};
import Anoma.Resource.Computable.Nullifier as Resource open using {Nullifier};
import Anoma.State.CommitmentTree as CommitmentTree open using {Root};
import Anoma.Transaction.Action as Action open;
import Anoma.Delta as Delta open using {Delta};
import Anoma.MathProperty open;
import Anoma.Proving.Types open;

--- A record describing a transaction object, the entity constituting a state transition in Anoma.
positive
type Transaction :=
  mkTransaction {
    roots : Set CommitmentTree.Root;
    actions : Set Action;
    delta : Delta;
    deltaProof : ProofRecord
  };

--- The ;Transaction; object constructor signature.
Constructor : Type :=
  (roots : Set CommitmentTree.Root)
    -> (actions : Set Action)
    -> (delta : Delta)
    -> (deltaProof : ProofRecord)
    -> Transaction;

--- Compses two ;Transaction; objects.
compose (tx1 tx2 : Transaction) : Transaction :=
  mkTransaction@{
    roots :=
      union@{
        s1 := Transaction.roots tx1;
        s2 := Transaction.roots tx2
      };
    actions :=
      union@{
        s1 := Transaction.actions tx1;
        s2 := Transaction.actions tx2
      };
    delta := AdditivelyHomomorphic.add (Transaction.delta tx1) (Transaction.delta tx2);
    -- TODO Use named syntax once fixed
    -- AdditivelyHomomorphic.add@{
    --   v1 := Transaction.delta tx1;
    --   v2 := Transaction.delta tx2
    -- };
    deltaProof :=
      DeltaProof.aggregate@{
        p1 := Transaction.deltaProof tx1;
        p2 := Transaction.deltaProof tx2
      }
  };

commitmentSet (transaction : Transaction) : Set Resource.Commitment :=
  for (acc := Set.empty) (a in Transaction.actions transaction) {union acc (Action.commitments a)};

nullfierSet (transaction : Transaction) : Set Resource.Nullifier :=
  for (acc := Set.empty) (a in Transaction.actions transaction) {union acc (Action.nullifiers a)};
