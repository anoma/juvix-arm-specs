module Anoma.Transaction.Metadata;

import Stdlib.Prelude open using {&&};
import Anoma.Transaction.Types as Transaction open using {Transaction};
import Anoma.Transaction.Preference as Preference open using {Preference; compose};
import Anoma.Transaction.InformationFlow open using {InformationFlowControlPredicate};

--- The metadata that can be associated with a ;Transaction;.
--- The metadata that can used by actors to identify preferrable ;Transaction;s and specify information flow controll properties.
--- NOTE: For the private testnet, this is not required yet.
type Metadata :=
  mkMetadata {
    preference : Preference;
    informationFlowControlPredicate : InformationFlowControlPredicate
  };

--- A composite structure containing a ;Transaction; with ;Metadata;
--- NOTE: For the private testnet, this is not required yet.
type TransactionWithMetadata :=
  mkTransactionWithMetadata {
    transaction : Transaction;
    metadata : Metadata
  };

--- Composes two ;TransactionWithMetadata; objects.
--- NOTE: For the private testnet, this is not required yet.
compose (txwm1 txwm2 : TransactionWithMetadata) : TransactionWithMetadata :=
  let
    meta1 := TransactionWithMetadata.metadata txwm1;
    meta2 := TransactionWithMetadata.metadata txwm2;
  in mkTransactionWithMetadata@{
    transaction :=
      Transaction.compose@{
        tx1 := TransactionWithMetadata.transaction txwm1;
        tx2 := TransactionWithMetadata.transaction txwm2
      };
    metadata :=
      mkMetadata@{
        preference :=
          Preference.compose@{
            f1 := Metadata.preference meta1;
            f2 := Metadata.preference meta2
          };
        informationFlowControlPredicate :=
          \ {tx id :=
            Metadata.informationFlowControlPredicate meta1 tx id
              && Metadata.informationFlowControlPredicate meta2 tx id}
      }
  };
