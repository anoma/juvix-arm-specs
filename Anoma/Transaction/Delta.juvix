module Anoma.Transaction.Delta;

import Stdlib.Prelude open using {Bool; List; for; ||; ,; Result; error; ok};
import Data.Set as Set open using {Set; union; member?};
import Anoma.Delta as Delta open using {Delta; zero};
import Anoma.Transaction.Types open using {Transaction; commitmentSet; nullifierSet};
import Anoma.Transaction.Action open using {DuplicateError; DuplicatedCommitmentError; DuplicatedNullifierError};
import Anoma.Resource.Index as Resource open using {Resource};
import Anoma.MathProperty as MathProperty open;

--- Computes the ;Delta; of a ;Resource; ;Set; being part of a ;Transaction;.
delta
  (resources : Set Resource)
  (nullifierKey : Resource.NullifierKey)
  (transaction : Transaction)
  : Result DuplicateError Delta :=
  case commitmentSet transaction, nullifierSet transaction of
    | error err, _ := error (DuplicatedCommitmentError err)
    | _, error err := error (DuplicatedNullifierError err)
    | ok cms, ok nfs :=
      ok
        for (acc := zero) (r in resources)
          {if
            | member? (Resource.commitment r) cms
              || member? (Resource.nullifier r nullifierKey) nfs :=
              AdditivelyHomomorphic.add acc (Resource.delta r)
            -- TODO: Ask Yulia how this should be handled. Should we throw an error here?
            | else := acc};
