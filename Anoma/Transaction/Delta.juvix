module Anoma.Transaction.Delta;

import Stdlib.Prelude open using {Bool; List; for; ||};
import Data.Set as Set open using {Set; union; member?};
import Anoma.Delta as Delta open using {Delta; zero};
import Anoma.Transaction.Types open using {Transaction; commitmentSet; nullifierSet};
import Anoma.Resource.Index as Resource open using {Resource};
import Anoma.MathProperty as MathProperty open;

--- Computes the ;Delta; of a ;Resource; ;Set; being part of a ;Transaction;.
delta
  (resources : Set Resource)
  (nullifierKey : Resource.NullifierKey)
  (transaction : Transaction)
  : Delta :=
  for (acc := zero) (r in resources)
    {if
      | member? (Resource.commitment r) (commitmentSet transaction)
        || member? (Resource.nullifier r nullifierKey) (nullifierSet transaction) :=
        AdditivelyHomomorphic.add acc (Resource.delta r)
      | else := acc};
