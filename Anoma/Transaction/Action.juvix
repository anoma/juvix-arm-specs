module Anoma.Transaction.Action;

import Stdlib.Prelude open;
import Stdlib.Trait.Ord.Eq open using {fromOrdToEq};
import Stdlib.Data.Set as Set open using {Set};
import Anoma.Resource as Resource open using {Resource};
import Anoma.Generic.ProofRecord open using {ProofRecord};
import Anoma.Transaction.AppData open using {AppData};
import Anoma.Utils open;

--- The record describing an action and defining the proof context.
--- Proofs includes resource logic and compliance proofs of created and consumed resources.
--- The latter include multiple constraints such as the
--- - non-existence of created ;Resource;s in the commitment tree
--- - existence of consumed ;Resource;s in the commitment tree
--- - non-existence of consumed ;Resource;s in the nullifier set.
type Action :=
  mkAction@{
    commitments : Set Resource.Commitment;
    nullifiers : Set Resource.Nullifier;
    proofRecords : Set ProofRecord;
    appData : AppData;
  };

--- Verifies an ;Action; by verifying all proofs in the ;ProofRecord; ;Set;.
verifyAction (a : Action) : Bool := MISSING_ANOMA_BUILTIN;

module ActionInternal;
  --- Compares two ;Action; objects.
  compare (lhs rhs : Action) : Ordering :=
    let
      prod (a : Action) : _ :=
        Action.commitments a
          , Action.nullifiers a
          , Action.proofRecords a
          , Action.appData a;
    in Ord.cmp (prod lhs) (prod rhs);

  --- Implements the ;Ord; trait for ;Action;.
  instance
  Action-Ord : Ord Action := mkOrd compare;

  --- Implements the ;Eq; trait for ;Action;.
  instance
  Action-Eq : Eq Action := fromOrdToEq;
end;
