module Anoma.Transaction.Object;

import Stdlib.Prelude open;
import Stdlib.Data.Set as Set open using {Set};
import Stdlib.Trait.Ord.Eq open using {fromOrdToEq};
import Anoma.Resource.Types as Resource;
import Anoma.State.CommitmentTree as CommitmentTree;
import Anoma.Transaction.Action open using {Action};
import Anoma.Delta as Delta open using {Delta};
import Anoma.Generic.ProofRecord open using {ProofRecord; DeltaProofRecord};
import Anoma.Utils open;

--- A record describing a transaction object, the entity constituting a state transition in Anoma.
positive
type Transaction :=
  mkTransaction@{
    roots : Set CommitmentTree.Root;
    actions : Set Action;
    delta : Delta;
    deltaProofRecord : ProofRecord;
  };

--- Computes the ;Transaction; ;Delta;.
transactionDelta (transaction : Transaction) : Delta := MISSING_ANOMA_BUILTIN;

axiom dummy : {A : Type} -> A;

--- Composes two ;Transaction; objects.
composeTransactions (tx1 tx2 : Transaction) : Transaction :=
  mkTransaction@{
    roots := Set.union (Transaction.roots tx1) (Transaction.roots tx2);
    actions := Set.union (Transaction.actions tx1) (Transaction.actions tx2);
    delta := Delta.addDelta (Transaction.delta tx1) (Transaction.delta tx2);
    --- TODO Fix when inputs deltaProofRecord are known.
    deltaProofRecord :=
      DeltaProofRecord (Delta.mkProofRecord dummy dummy dummy);
  };

--- Verifies a ;Transaction;.
verifyTransaction (tx : Transaction) : Bool := MISSING_ANOMA_BUILTIN;

--- Returns the ;Resource.Commitment; ;Set; of all ;Action;s in a ;Transaction; or the intersection ;Set;.
--- TODO needed?
commitmentsFromTransaction
  (transaction : Transaction) : Set Resource.Commitment :=
  MISSING_ANOMA_BUILTIN;

--- Returns the ;Resource.Nullifier; ;Set; of a ;Transaction;.
--- TODO needed?
nullifiersFromTransaction
  (transaction : Transaction) : Set Resource.Nullifier := MISSING_ANOMA_BUILTIN;

module TransactionInternal;
  --- Compares two ;Transaction; objects.
  compare (lhs rhs : Transaction) : Ordering :=
    let
      prod (tx : Transaction) : _ :=
        Transaction.roots tx, Transaction.actions tx;
    in Ord.cmp (prod lhs) (prod rhs);

  --- Implements the ;Ord; trait for ;Transaction;.
  instance
  Transaction-Ord : Ord Transaction := mkOrd compare;

  --- Implements the ;Eq; trait for ;Transaction;.
  instance
  Transaction-Eq : Eq Transaction := fromOrdToEq;
end;
