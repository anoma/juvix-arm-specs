module Anoma.Transaction.Object;

import Stdlib.Prelude open;
import Stdlib.Data.Set as Set open using {Set};
import Anoma.Resource.Types as Resource;
import Anoma.State.CommitmentTree as CommitmentTree;
import Anoma.Transaction.Action open using {Action};
import Anoma.Delta as Delta open using {Delta};
import Anoma.Generic.ProofRecord open using {ProofRecord};
import Anoma.Utils open;

--- A record describing a transaction object, the entity constituting a state transition in Anoma.
positive
type Transaction :=
  mkTransaction@{
    roots : Set CommitmentTree.Root;
    actions : Set Action;
    delta : Delta;
    deltaProofRecord : Delta.ProofRecord;
  };

--- Computes the ;Transaction; ;Delta;.
transactionDelta (transaction : Transaction) : Delta := MISSING_ANOMA_BUILTIN;

--- Composes two ;Transaction; objects.
composeTransactions (tx1 tx2 : Transaction) : Transaction :=
  mkTransaction@{
    roots := Set.union (Transaction.roots tx1) (Transaction.roots tx2);
    actions := Set.union (Transaction.actions tx1) (Transaction.actions tx2);
    delta := Delta.addDelta (Transaction.delta tx1) (Transaction.delta tx2);
    deltaProofRecord :=
      Delta.aggregate
        (Transaction.deltaProofRecord tx1)
        (Transaction.deltaProofRecord tx2);
  };

--- Verifies a ;Transaction;.
verifyTransaction (tx : Transaction) : Bool := MISSING_ANOMA_BUILTIN;

--- Returns the ;Resource.Commitment; ;Set; of all ;Action;s in a ;Transaction; or the intersection ;Set;.
--- TODO needed?
commitmentsFromTransaction
  (transaction : Transaction) : Set Resource.Commitment :=
  MISSING_ANOMA_BUILTIN;

--- Returns the ;Resource.Nullifier; ;Set; of a ;Transaction;.
--- TODO needed?
nullifiersFromTransaction
  (transaction : Transaction) : Set Resource.Nullifier := MISSING_ANOMA_BUILTIN;

deriving instance
Transaction-Ord : Ord Transaction;

deriving instance
Transaction-Eq : Eq Transaction;
