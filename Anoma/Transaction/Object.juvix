module Anoma.Transaction.Object;

import Stdlib.Prelude open;
import Stdlib.Data.Set as Set open using {Set};
import Stdlib.Trait.Ord.Eq open using {fromOrdToEq};
import Anoma.Resource.Types as Resource;
import Anoma.State.CommitmentTree as CommitmentTree;
import Anoma.Transaction.Action open using {Action; AnomaAction; toAnomaAction};
import Anoma.Delta as Delta open using {Delta};
import Anoma.Generic.ProofRecord open using {ProofRecord};
import Anoma.Utils open;

--- A record describing a transaction object, the entity constituting a state transition in Anoma.
positive
type Transaction :=
  mkTransaction@{
    roots : Set CommitmentTree.Root;
    actions : Set Action;
    delta : Delta;
    deltaProofRecord : ProofRecord;
  };

--- Computes the ;Transaction; ;Delta;.
transactionDelta (transaction : Transaction) : Delta :=
  STILL_MISSING_ANOMA_BUILTIN;

--- Composes two ;Transaction; objects.
composeTransactions (tx1 tx2 : Transaction) : Transaction :=
  STILL_MISSING_ANOMA_BUILTIN;

--- Verifies a ;Transaction;.
verifyTransaction (tx : Transaction) : Bool := NOT_REQUIRED;

--- Returns the ;Resource.Commitment; ;Set; of all ;Action;s in a ;Transaction; or the intersection ;Set;.
commitments (transaction : Transaction) : Set Resource.Commitment :=
  STILL_MISSING_ANOMA_BUILTIN;

--- Returns the ;Resource.Nullifier; ;Set; of a ;Transaction;.
nullifiers (transaction : Transaction) : Set Resource.Nullifier :=
  STILL_MISSING_ANOMA_BUILTIN;

module TransactionInternal;
  --- Compares two ;Transaction; objects.
  compare (lhs rhs : Transaction) : Ordering :=
    let
      prod (tx : Transaction) : _ :=
        Transaction.roots tx, Transaction.actions tx;
    in Ord.cmp (prod lhs) (prod rhs);

  --- Implements the ;Ord; trait for ;Transaction;.
  instance
  Transaction-Ord : Ord Transaction := mkOrd compare;

  --- Implements the ;Eq; trait for ;Transaction;.
  instance
  Transaction-Eq : Eq Transaction := fromOrdToEq;
end;

--- NOTE: Needed for integration purposes.
type AnomaTransaction :=
  mkAnomaTransaction@{
    roots : List CommitmentTree.Root;
    actions : List AnomaAction;
    delta : Delta;
    deltaProofRecord : ProofRecord;
  };

--- NOTE: Needed for integration purposes.
toAnomaTransaction (transaction : Transaction) : AnomaTransaction :=
  mkAnomaTransaction@{
    roots := Set.toList (Transaction.roots transaction);
    actions := map toAnomaAction (Set.toList (Transaction.actions transaction));
    delta := Transaction.delta transaction;
    deltaProofRecord := Transaction.deltaProofRecord transaction;
  };
