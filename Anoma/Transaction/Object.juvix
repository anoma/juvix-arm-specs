module Anoma.Transaction.Object;

import Stdlib.Prelude open;
import Stdlib.Data.Set as Set open using {Set};
import Anoma.Resource.Types as Resource;
import Anoma.State.CommitmentTree as CommitmentTree;
import Anoma.Transaction.Action open using {Action};
import Anoma.Delta as Delta open using {Delta};
import Anoma.Proving.DeltaProof as DeltaProof;
import Anoma.Utils open;

--- A record describing a transaction object, the entity constituting a state transition in Anoma.
positive
type Transaction :=
  mkTransaction {
    roots : Set CommitmentTree.Root;
    actions : Set Action;
    delta : Delta;
    deltaProofRecord : DeltaProof.ProofRecord
  };

--- Composes two ;Transaction; objects.
composeTransactions (tx1 tx2 : Transaction) : Transaction := STILL_MISSING_ANOMA_BUILTIN;

--- Verifies a ;Transaction;.
verifyTransaction (tx : Transaction) : Bool := NOT_REQUIRED;

--- Returns the ;Resource.Commitment; ;Set; of all ;Action;s in a ;Transaction; or the intersection ;Set;.
commitmentSet (transaction : Transaction) : Set Resource.Commitment := STILL_MISSING_ANOMA_BUILTIN;

--- Returns the ;Resource.Nullifier; ;Set; of a ;Transaction;.
nullifierSet (transaction : Transaction) : Set Resource.Nullifier := STILL_MISSING_ANOMA_BUILTIN;
