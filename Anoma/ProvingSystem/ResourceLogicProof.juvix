--- An instantiation of a proving System for resource logic proofs.
module Anoma.ProvingSystem.ResourceLogicProof;

import Stdlib.Prelude open using {Bool};
import Anoma.ProvingSystem.Types as Parametrized;
import Anoma.Resource.Logic as ResourceLogic;

--- A fixed-size data type encoding the resource logic proof.
axiom Proof : Type;

--- TODO: Ask Yulia if is this unused in this ProvingSystem?
VerifyingKey : Type := Parametrized.Unused;

--- TODO: Ask Yulia if is this unused in this ProvingSystem?
ProvingKey : Type := Parametrized.Unused;

ProofRecord : Type := Parametrized.ProofRecord Proof VerifyingKey ResourceLogic.Witness;

axiom prove : (provingKey : ProvingKey)
  -> (publicInputs : ResourceLogic.Instance)
  -> (privateInputs : ResourceLogic.Witness)
  -> Proof;

axiom verify : (proofRecord : ProofRecord) -> Bool;

instance
ResourceLogic-ProvingSystem
  : Parametrized.ProvingSystem
    Proof
    VerifyingKey
    ProvingKey
    ResourceLogic.Witness
    ResourceLogic.Instance :=
  Parametrized.mkProvingSystem@{
    prove;
    verify
  };
