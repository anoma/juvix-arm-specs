--- An instantiation of a proving System for resource logic proofs.
module Anoma.ProvingSystem.ResourceLogicProof;

import Stdlib.Prelude open using {Bool};
import Data.Set as Set open using {Set};
import Anoma.Resource.Types open using {Resource};
import Anoma.Resource.Computable.Commitment open using {Commitment};
import Anoma.Resource.Computable.Nullifier open using {Nullifier};
import Anoma.ProvingSystem.Types as Parametrized;

--- A fixed-size data type encoding the resource logic proof.
axiom Proof : Type;

axiom VerifyingKey : Type;

axiom ProvingKey : Type;

--- The reference to the ;Resource; carrying the logic function.
type Tag :=
  | Created Commitment
  | Consumed Nullifier;

--- The public inputs to the logi  function.
type Instance :=
  mkInstance {
    tag : Tag;
    commitments : Set Commitment;
    nullifiers : Set Nullifier;
    custom : CustomInstance
  };

axiom CustomInstance : Type;

--- The private inputs to the logic function.
type Witness :=
  mkWitness {
    created : Set Resource;
    consumed : Set Resource;
    custom : CustomWitness
  };

axiom CustomWitness : Type;

ProofRecord : Type := Parametrized.ProofRecord Proof VerifyingKey Witness;

axiom prove : (provingKey : ProvingKey)
  -> (publicInputs : Instance)
  -> (privateInputs : Witness)
  -> Proof;

axiom verify : (proofRecord : ProofRecord) -> Bool;

instance
ResourceLogic-ProvingSystem
  : Parametrized.ProvingSystem Proof VerifyingKey ProvingKey Witness Instance :=
  Parametrized.mkProvingSystem@{
    prove;
    verify
  };
