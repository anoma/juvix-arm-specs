--- An instantiation of a proving System for compliance proofs.
module Anoma.ProvingSystem.ComplianceProof;

import Stdlib.Prelude open using {Bool};
import Anoma.ProvingSystem.Types as Parametrized;

--- TODO Ask Yulia to concretize this more. Since we explicitly talk about CMTree in the report currently, we should also be more concrete here and generalize later.
axiom Proof : Type;

--- TODO: Ask yulia to explain how this is used.
axiom VerifyingKey : Type;

--- TODO: Ask yulia to explain how this is used.
axiom ProvingKey : Type;

--- TODO Can this types be replaced with definitions from `Anoma.State.CommitmentTree` and `Anoma.State.NullifierSet`?
axiom Instance : Type;
-- NOTE: Commitment

--- TODO Can this types be replaced with definitions from `Anoma.State.CommitmentTree` and `Anoma.State.NullifierSet`?
--- NOTE: Dependent on wheter a resource is created or consumed, the compliance proof is either
--- - a MerkleProof or
--- - a SetMembershipProof
axiom Witness : Type;

ProofRecord : Type := Parametrized.ProofRecord Proof VerifyingKey Witness;

axiom prove : (provingKey : ProvingKey)
  -> (publicInputs : Instance)
  -> (privateInputs : Witness)
  -> Proof;

axiom verify : (proofRecord : ProofRecord) -> Bool;

instance
Compliance-ProvingSystem
  : Parametrized.ProvingSystem Proof VerifyingKey ProvingKey Witness Instance :=
  Parametrized.mkProvingSystem@{
    prove;
    verify
  };
