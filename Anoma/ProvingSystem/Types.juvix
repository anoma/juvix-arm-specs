module Anoma.ProvingSystem.Types;

import Stdlib.Prelude open;

--- A record describing a proof record, a map entry constituted by a VerifyingKey as the lookup-key
--- and a Proof and associated Witness as the value.
ProofRecord (Proof VerifyingKey Witness : Type) : Type := Pair VerifyingKey (Pair Proof Witness);

--- A set of ProofRecords.
--- Each ;ProofRecord; in the set may be parameterized with different types for
--- Proof, VerifyingKey and Witness, allowing for heterogeneous ;ProofRecord;s
--- within the set. It's not currently possible to represent such a set in Juvix.
axiom ProofRecordSet : Type;

--- TODO: How can we get this to work?
module ProofRecordSet;
  axiom empty : ProofRecordSet;

  axiom verify : ProofRecordSet -> Bool;
end;

--- The interface of the resource machine proving system.
--- Proof: A fixed-size data type encoding a proof.
--- VerifyingKey: A fixed-size data type encoding a verifying key containing the data.
--- ProvingKey: A fixed-size data type encoding a proving key containing the data.
--- Instance: The subset of inputs required to both create and verify a proof.
--- Witness: The subset of inputs used to produce but not verify a proof.
trait
type ProvingSystem Proof VerifyingKey ProvingKey Instance Witness :=
  mkProvingSystem {
    --- Creates a proof given a proving key, public inputs (Instance), and
    --- private inputs (Witness).
    prove : (provingKey : ProvingKey)
      -> (publicInputs : Instance)
      -> (privateInputs : Witness)
      -> Proof;

    --- Verfies a ;ProofRecord;.
    verify : (proofRecord : ProofRecord Proof VerifyingKey Witness) -> Bool
  };
