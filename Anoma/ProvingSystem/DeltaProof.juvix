--- An instantiation of a Proving System for Delta proofs.
module Anoma.ProvingSystem.DeltaProof;

import Stdlib.Prelude open using {Bool};
import Anoma.ProvingSystem.Types as Parametrized;

axiom Proof : Type;

axiom VerifyingKey : Type;

axiom ProvingKey : Type;

--- TODO Can this types be replaced with definitions from `Anoma.Transaction.Delta`?
axiom Instance : Type;

--- TODO Can this types be replaced with definitions from `Anoma.Transaction.Delta`?
axiom Witness : Type;

ProofRecord : Type := Parametrized.ProofRecord Proof VerifyingKey Witness;

axiom prove : (provingKey : ProvingKey)
  -> (publicInputs : Instance)
  -> (privateInputs : Witness)
  -> Proof;

axiom verify : (proofRecord : ProofRecord) -> Bool;

instance
Delta-ProvingSystem : Parametrized.ProvingSystem Proof VerifyingKey ProvingKey Witness Instance :=
  Parametrized.mkProvingSystem@{
    prove;
    verify
  };

--- Aggregates two  delta ;ProofRecord;s.
axiom aggregate : (p1 p2 : ProofRecord) -> ProofRecord;
