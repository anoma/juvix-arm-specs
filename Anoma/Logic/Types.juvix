module Anoma.Logic.Types;

import Stdlib.Prelude open;
import Stdlib.Data.Set as Set open using {Set};

import Anoma.Resource.Object open using {Resource};
import Anoma.Resource.Types open using {Commitment; Nullifier};
import Anoma.Resource.Tag open using {Tag};
import Anoma.Transaction.AppData open using {AppData};
import Anoma.Transaction.CustomInputs open using {CustomInputs};
import Anoma.Utils open;
import Anoma.Builtin.System open;

type Proof :=
  mkProof@{
    unProof : AnomaOpaque;
  };

type VerifyingKey :=
  mkVerifyingKey@{
    unVerifyingKey : UNUSED;
  };

type ProvingKey :=
  mkProvingKey@{
    unProvingKey : Resource;
  };

--- The public inputs (Instance) of the resource logic function proof.
type Instance :=
  mkInstance@{
    tag : Tag;
    commitments : Set Commitment;
    nullifiers : Set Nullifier;
    appData : AppData;
  };

--- The private inputs (Witness) of the resource logic function proof.
type Witness :=
  mkWitness@{
    created : Set Resource;
    consumed : Set Resource;
    customInputs : CustomInputs;
  };

--- The resource logic function signature.
Logic : Type := (publicInputs : Instance) -> (privateInputs : Witness) -> Bool;

type ProofRecord :=
  mkProofRecord@{
    proof : Proof;
    verifyingKey : VerifyingKey;
    instance : Instance;
  };

deriving instance
Proof-Ord : Ord Proof;

deriving instance
Proof-Eq : Eq Proof;

deriving instance
VerifyingKey-Ord : Ord VerifyingKey;

deriving instance
VerifyingKey-Eq : Eq VerifyingKey;

deriving instance
Instance-Ord : Ord Instance;

deriving instance
Instance-Eq : Eq Instance;

deriving instance
Witness-Ord : Ord Witness;

deriving instance
Witness-Eq : Eq Witness;

deriving instance
ProofRecord-Ord : Ord ProofRecord;

deriving instance
ProofRecord-Eq : Eq ProofRecord;
