module Anoma.State.ResourceMachine;

import Stdlib.Prelude open;
import Stdlib.Data.Set as Set open using {Set};
import Anoma.Transaction.Object as Transaction open using {
  Transaction;
  mkTransaction;
  composeTransactions;
  verifyTransaction;
};
import Anoma.State.CommitmentTree as CommitmentTree open using {Root};
import Anoma.Transaction.Action as Action open using {Action};
import Anoma.Delta as Delta open using {Delta};

--- The resource machine interface.
trait
type ResourceMachine :=
  mkResourceMachine@{
    --- Creates a ;Transaction;.
    create
      : (roots : Set CommitmentTree.Root)
        -> (actions : Set Action)
        -> (delta : Delta)
        -> (deltaProof : Delta.ProofRecord)
        -> Transaction;

    --- Composes two ;Transaction;s with the transa
    compose : (tx1 tx2 : Transaction) -> Transaction;

    --- Verifies a ;Transaction; by checking that all proofs are valid.
    --- This includes resource logic proofs, compliance proofs, and the delta proof (a.k.a., balance proof))
    verify : (tx : Transaction) -> Bool;
  };

--- The resource machine instantiation.
--- NOTE: After all axioms have been replaced by concrete definitions, this intance becomes a concrete resource machine.
instance
Concrete-ResourceMachine : ResourceMachine :=
  mkResourceMachine@{
    create := Transaction.mkTransaction;
    compose := Transaction.composeTransactions;
    verify := Transaction.verifyTransaction;
  };
