module Anoma.Compliance.Types;

import Stdlib.Prelude open;
import Anoma.Utils open;
import Anoma.Builtin.System open;

type Proof :=
  mkProof@{
    unProof : AnomaOpaque;
  };

type VerifyingKey :=
  mkVerifyingKey@{
    unVerifyingKey : UNUSED;
  };

type ProvingKey :=
  mkProvingKey@{
    unProvingKey : UNUSED;
  };

type Instance :=
  mkInstance@{
    unInstance : UNUSED;
  };

type Witness :=
  mkWitness@{
    unWitness : UNUSED;
  };

type ProofRecord :=
  mkProofRecord@{
    proof : Proof;
    verifyingKey : VerifyingKey;
    instance : Instance;
  };

deriving instance
Proof-Ord : Ord Proof;

deriving instance
Proof-Eq : Eq Proof;

deriving instance
VerifyingKey-Ord : Ord VerifyingKey;

deriving instance
VerifyingKey-Eq : Eq VerifyingKey;

deriving instance
Instance-Ord : Ord Instance;

deriving instance
Instance-Eq : Eq Instance;

deriving instance
Witness-Ord : Ord Witness;

deriving instance
Witness-Eq : Eq Witness;

deriving instance
ProofRecord-Ord : Ord ProofRecord;

deriving instance
ProofRecord-Eq : Eq ProofRecord;
