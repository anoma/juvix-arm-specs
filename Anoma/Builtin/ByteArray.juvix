module Anoma.Builtin.ByteArray;

import Stdlib.Prelude open hiding {length};
import Stdlib.Trait.Ord.Eq open using {fromOrdToEq};

builtin bytearray
axiom ByteArray : Type;

builtin bytearray-from-list-byte
axiom mkByteArray : List Byte -> ByteArray;

builtin bytearray-length
axiom length : ByteArray -> Nat;

module ByteArrayInternal;
  syntax alias AnomaByteArray := Nat;

  builtin anoma-bytearray-to-anoma-contents
  axiom toAnomaByteArray : ByteArray -> AnomaByteArray;

  instance
  ByteArray-Ord : Ord ByteArray :=
    let
      prod (b : ByteArray) : _ := length b, toAnomaByteArray b;
    in mkOrd@{
         cmp (lhs rhs : ByteArray) : Ordering := Ord.cmp (prod lhs) (prod rhs);
       };

  --- Implements the ;Eq; trait for ;ByteArray;.
  instance
  ByteArray-Eq : Eq ByteArray := fromOrdToEq;
end;
