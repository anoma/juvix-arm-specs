module Anoma.Builtin.System;

import Stdlib.Prelude open;
import Anoma.Builtin.ByteArray open;

module Internal;
  syntax alias PublicKey := ByteArray;
  syntax alias PrivateKey := ByteArray;

  syntax alias Signature := ByteArray;
  syntax alias SignedMessage := ByteArray;
end;

-- TODO Add builtin.
-- builtin anoma-opaque
-- axiom AnomaOpaque : Type;
type AnomaOpaque := MISSING_ANOMA_BUILTIN;

--- Encodes a value into a natural number.
builtin anoma-encode
axiom anomaEncode : {Value : Type}
  -- | The value to encode.
  -> Value
  -- | The encoded natural number.
  -> Nat;

--- Decodes a value from a natural number.
builtin anoma-decode
axiom anomaDecode : {Value : Type}
  -- | The natural number to decode .
  -> Nat
  -- | The decoded value.
  -> Value;

--- Signs a message with a private key and returns a signed message.
builtin anoma-sign
axiom anomaSign : {Message : Type}
  -- | The message to sign.
  -> Message
  -- | The signing private key.
  -> Internal.PrivateKey
  -- | The resulting signed message.
  -> Internal.SignedMessage;

--- Signs a message with a private key and returns the signature.
builtin anoma-sign-detached
axiom anomaSignDetached : {Message : Type}
  -- | The message to sign.
  -> Message
  -- | The signing private key.
  -> Internal.PrivateKey
  -- The resulting signature
  -> Internal.Signature;

--- Verifies a signature against a message and public key.
builtin anoma-verify-detached
axiom anomaVerifyDetached : {Message : Type}
  -- | The signature to verify.
  -> Internal.Signature
  -- | The message to verify against.
  -> Message
  -- | The signer public key to verify against.
  -> Internal.PublicKey
  -- | The verification result.
  -> Bool;

--- Verifies a signature against a message and public key and return the message on success.
builtin anoma-verify-with-message
axiom anomaVerifyWithMessage : {Message : Type}
  -- | The signed message to verify.
  -> Internal.SignedMessage
  -- | The signer public key to verify against.
  -> Internal.PublicKey
  -- | The original message.
  -> Maybe Message;

instance
AnomaOpaque-Ord : Ord AnomaOpaque :=
  mkOrd@{
    cmp := Ord.cmp on anomaEncode
  };
