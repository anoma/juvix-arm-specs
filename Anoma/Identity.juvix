module Anoma.Identity;

import Stdlib.Prelude open;
import Stdlib.Trait.Ord.Eq open using {fromOrdToEq};

--- A fixed-size data type describing an external identity.
axiom ExternalIdentity : Type;

--- A fixed-size data type describing an internal identity.
axiom InternalIdentity : Type;

--- A record describing an identity.
--- NOTE: For the private testnet, this deviates from the specs https://specs.anoma.net/v2/system_architecture/identity/identity.html.
type Identity :=
  mkIdentity {
    external : ExternalIdentity;
    internal : InternalIdentity
  };

module ExternalIdentityInternal;
  --- Compares two ;ExternalIdentity; objects.
  axiom compare : (lhs rhs : ExternalIdentity) -> Ordering;

  --- Implements the ;Ord; trait for ;ExternalIdentity;.
  instance
  ExternalIdentity-Ord : Ord ExternalIdentity := mkOrd compare;

  --- Implements the ;Eq; trait for ;ExternalIdentity;.
  instance
  ExternalIdentity-Eq : Eq ExternalIdentity := fromOrdToEq;
end;

module InternalIdentityInternal;
  --- Compares two ;InternalIdentity; objects.
  axiom compare : (lhs rhs : InternalIdentity) -> Ordering;

  --- Implements the ;Ord; trait for ;InternalIdentity;.
  instance
  InternalIdentity-Ord : Ord InternalIdentity := mkOrd compare;

  --- Implements the ;Eq; trait for ;ExternalIdentity;.
  instance
  InternalIdentity-Eq : Eq InternalIdentity := fromOrdToEq;
end;

module IdentityInternal;
  --- Compares two ;Identity; objects.
  compare (lhs rhs : Identity) : Ordering :=
    Ord.cmp (Identity.external lhs) (Identity.external rhs);

  --- Implements the ;Ord; trait for ;Identity;.
  instance
  Identity-Ord : Ord Identity := mkOrd compare;

  --- Implements the ;Eq; trait for ;Identity;.
  instance
  Identity-Eq : Eq Identity := fromOrdToEq;
end;
