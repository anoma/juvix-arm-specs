module Anoma.Utils;

import Stdlib.Prelude open;
import Stdlib.Debug.Fail open using {failwith};
import Stdlib.Trait.Ord.Eq open using {fromOrdToEq};
import Anoma.Builtin.ByteArray open;

--builtin anoma-opaque
--axiom AnomaOpaque : Type;

--- A type describing the absence of a types.
--- NOTE: This can be used in instantiated interfaces for type parameters that are not used.
UNUSED : Type := Unit;

--- A type describing an unknown type that must be clarified.
--- NOTE: This can be used in instantiated interfaces for type parameters that are not unknown.
UNKNOWN : Type := Unit;

--- A placeholder for a missing implementation.
NOT_IMPLEMENTED : {A : Type} → A := failwith "NOT IMPLEMENTED";

-- TODO Improve
NOT_RELEVANT_FOR_JUVIX_FOLKS : {A : Type} → A :=
  failwith "MUST_BE_IMPLEMENTED_IN_ELIXIR_AND_IT_IS_NOT_CALLED_FROM_JUVIX";

--- A placeholder for a missing Juvix implementation.
MISSING_JUVIX_IMPLEMENTATION : {A : Type} → A := NOT_IMPLEMENTED;

--- A placeholder for a missing Anoma builtin.
MISSING_ANOMA_BUILTIN : {A : Type} → A := NOT_IMPLEMENTED;

--- A placeholder for an implementation that is not required for the private testnet.
NOT_REQURED_YET : {A : Type} → A := NOT_IMPLEMENTED;

--- A trait for transforming values of a `DataType` into values of its
--- corresponding `RefType`. Values of `RefType` must have fixed size. For the
--- private testnet, the requirement can be relaxed by allowing ;RefType; to be
--- dynamically-sized.
trait
type Ref DataType RefType :=
  mkRef {
    toRef : DataType -> RefType;
    fromRef : RefType -> DataType
  };
